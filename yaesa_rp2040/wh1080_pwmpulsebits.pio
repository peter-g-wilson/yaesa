
.program PWMpulseBits

; Roughly a data ‘1’ is 0.5 ms pulse, ‘0’ is 1.5 ms and the gap between pulses is 1.0 ms.

; Method: 
; - wait for pin high ,
; - count pulse duration , 
;     if pin goes low and the count is less than the time for a '1' 
;        then restart at the wait for pin high
;     if pin goes low so the pulse is long enough for a ‘1’ (but not a ‘0’) 
;        then set x = 1
;     or if the pin is still high and the pulse duration is long enough for a ‘0’ 
;        then set x = 0 and wait for the pin to go low
; - after setting x (and pin now low) count the gap duration ,
;     if pin goes high and the count is less than the time for the gap
;        then restart at the count pulse sequence (no wait for pin high)
;     if gap is long enough emit X which will be ‘1’ or ‘0’
;        then restart at the wait for pin high

; With 125 MHz system clock and a divisor of 625.0F => 1 state machine cycle time of 5 us

; => short_timer 5*(1+2)=15 us; loop*16 = 240 us
; => long_timer  5*(1+3)=20 us; loop*30 = 600 us
; => gap_timer   5*(1+3)=20 us; loop*29 = 580 us

.wrap_target
start_of_hi:
    wait 1 pin 0
already_hi:
    set y, 15
short_timer:
    jmp y-- test_short_hi
    set y, 31
long_timer:
    jmp y-- test_long_hi
    set x, 0
    wait 0 pin 0
    
gap_start:    
    set y, 28
gap_timer:
    jmp pin already_hi
    jmp y-- gap_timer [2]
    in x, 1    
    jmp start_of_hi

test_short_hi:
    jmp pin short_timer [1]
.wrap

test_long_hi:
    jmp pin long_timer [2]
    set x, 1
    jmp gap_start
